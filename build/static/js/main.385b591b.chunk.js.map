{"version":3,"sources":["features/userSlice.js","features/appSlice.js","firebase.js","components/SidebarServer.js","components/SidebarChannel.js","components/Sidebar.js","components/Message.js","components/ChatHeader.js","components/Chat.js","components/Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","appSlice","serverId","serverName","channelId","channelName","setServerInfo","setChannelInfo","selectServerId","app","selectServerName","selectChannelId","selectChannelName","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarServer","photo","channels","setChannels","dispatch","useSelector","useDispatch","className","onClick","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","channel","data","console","log","src","SidebarChannel","Sidebar","useState","servers","setServers","useEffect","server","prompt","serverPhoto","add","administrators","displayName","uid","moderators","SignalCellularAltRounded","fontSize","Avatar","signOut","substring","Message","timestamp","message","file","fileType","Date","toDate","toUTCString","properties","target","url","Linkify","MATCH","el","controls","href","verifyFile","ChatHeader","placeholder","Chat","dummy","useRef","input","setInput","messages","setMessages","setFile","setPlaceholder","emojiDisplay","setEmojiDisplay","storageRef","storage","ref","current","scrollIntoView","behavior","style","display","onEmojiClick","event","emojiObject","emoji","type","accept","disabled","files","onChange","e","React","createElement","htmlFor","value","preventDefault","fileRef","fileURL","onResolve","foundURL","a","FieldValue","serverTimestamp","size","alert","child","getDownloadURL","then","put","split","join","Login","alt","Button","signInWithPopup","catch","error","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.385b591b.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    serverId: null,\r\n    serverName: null,\r\n    channelId: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setServerInfo: (state, action) => {\r\n      state.serverId = action.payload.serverId;\r\n      state.serverName = action.payload.serverName;\r\n      state.channelId = null;\r\n      state.channelName = null;\r\n    },\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setServerInfo, setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectServerId = state => state.app.serverId;\r\nexport const selectServerName = state => state.app.serverName;\r\nexport const selectChannelId = state => state.app.channelId;\r\nexport const selectChannelName = state => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import firebase from \"firebase\";\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB05OmarqivGc5YTKUATgzXJ8Nz_IOuv9M\",\r\n    authDomain: \"discord-clone-75157.firebaseapp.com\",\r\n    projectId: \"discord-clone-75157\",\r\n    storageBucket: \"discord-clone-75157.appspot.com\",\r\n    messagingSenderId: \"538671599107\",\r\n    appId: \"1:538671599107:web:1fe145eaebf8df167f8836\",\r\n    measurementId: \"G-XDTQKXKTD7\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export { auth, provider };\r\n  export default db;","import React from 'react';\r\nimport './SidebarServer.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { setServerInfo } from '../features/appSlice';\r\nimport db from '../firebase';\r\nfunction SidebarServer({serverId, serverName, photo, channels, setChannels}) {\r\n    const user = useSelector(selectUser);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"sidebar__server\" \r\n            onClick={ () => {\r\n                dispatch(\r\n                    setServerInfo({\r\n                        serverId: serverId,\r\n                        serverName: serverName,\r\n                    })\r\n                )\r\n                db.collection('servers/' + serverId + '/channels')\r\n                    .orderBy(\"channelName\", \"asc\")\r\n                    .onSnapshot(snapshot => (\r\n                        setChannels(snapshot.docs.map(doc => ({\r\n                            id: doc.id,\r\n                            channel: doc.data(),\r\n                        })))\r\n                    ))\r\n                    console.log(channels);\r\n            }}\r\n            >\r\n            <img id={serverId} name={serverName} src={(photo)?photo:\"\"} className=\"sidebar__serverImg\" />\t\t\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarServer\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChannelInfo } from '../features/appSlice';\r\nimport \"./SidebarChannel.css\";\r\n\r\nfunction SidebarChannel({ id, channelName }) {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"sidebarChannel\" \r\n            onClick={ () => \r\n                dispatch(\r\n                    setChannelInfo({\r\n                        channelId: id,\r\n                        channelName: channelName,\r\n                    })\r\n                )\r\n            }\r\n        >\r\n            <h4>\r\n                <span className=\"sidebarChannel__hash\">#</span>{ channelName }\r\n            </h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarChannel\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport SidebarServer from './SidebarServer';\r\nimport './Sidebar.css'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport { SignalCellularAltRounded } from '@material-ui/icons';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport { Avatar } from '@material-ui/core';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport db, { auth } from '../firebase';\r\nimport { selectServerId, selectServerName } from '../features/appSlice';\r\n\r\nfunction Sidebar() {\r\n    const user = useSelector(selectUser);\r\n    const [channels, setChannels] = useState([]);\r\n    const [servers, setServers] = useState([]);\r\n    const serverId = useSelector(selectServerId);\r\n    const serverName = useSelector(selectServerName);\r\n\r\n    useEffect(() => {\r\n        db.collection('servers')\r\n        .orderBy(\"serverName\", \"asc\")\r\n        .onSnapshot(snapshot => (\r\n            setServers(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                server: doc.data(),\r\n            })))\r\n        ));\r\n    }, []);\r\n\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt('Enter a new channel')\r\n        if(serverId && channelName) {\r\n            db.collection(\"servers/\" + serverId + \"/channels\").add({\r\n                channelName: channelName,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleAddServer = () => {\r\n        const serverName = prompt('Enter a new server')\r\n\r\n        if(serverName) {\r\n            const serverPhoto = prompt('Enter photo URL')\r\n            if(serverPhoto){\r\n                db.collection(\"servers\").add({\r\n                serverName: serverName,\r\n                photo: serverPhoto,\r\n                administrators: [{displayName: user.displayName, uid: user.uid}],\r\n                moderators: []\r\n             })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar__panel\">\r\n        <div className=\"sidebar__serverList\">\r\n            {\r\n                servers.map((server) => (\r\n                    <SidebarServer \r\n                        serverId = {server.id} \r\n                        serverName = {server.server.serverName} \r\n                        photo = {server.server.photo} \r\n                        channels = {channels} \r\n                        setChannels = {setChannels} \r\n                    />\r\n                ))\r\n            }\r\n            <AddIcon onClick={handleAddServer} className=\"sidebar__addServer\" />  \r\n        </div>\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <h3>{serverName}</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n                </div>\r\n                <div className=\"sidebar__channelsList\">\r\n                    {channels.map(({id, channel}) => (\r\n                            <SidebarChannel key={id} id={id} channelName={channel.channelName} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltRounded \r\n                    className=\"sidebar__voiceIcon\"\r\n                    fontSize=\"large\"\r\n                />\r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar onClick={() => auth.signOut()}src={user.photo}/>\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>\r\n                        {user.displayName}\r\n                    </h3>\r\n                    <p>\r\n                        #{user.uid.substring(0,10)}\r\n                    </p>\r\n                </div>\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport Linkify from 'react-linkify';\r\nimport \"./Message.css\"\r\n\r\nfunction Message({ timestamp, message, user, file, fileType }) {\r\n    let url = \"not defined\";\r\n    function verifyFile() {\r\n        let el = null;\r\n        if(file){\r\n            switch(fileType){\r\n                case(\"image/apng\"):\r\n                case(\"image/avif\"):\r\n                case(\"image/bmp\"):\r\n                case(\"image/gif\"):\r\n                case(\"image/jpeg\"):\r\n                case(\"image/png\"):\r\n                case(\"image/svg+xml\"):\r\n                case(\"image/webp\"):\r\n                case(\"image/x-icon\"):\r\n                    el = <img src={file} className=\"attached__media message__attachment\" />\r\n                    break;\r\n                case(\"audio/mpeg\"):\r\n                case(\"audio/ogg\"):\r\n                case(\"audio/wav\"):\r\n                    el = <audio controls className=\"message__attachment\"><source src={file}/>Audio tag unsupported</audio>\r\n                    break;\r\n                case(\"video/mp4\"):\r\n                case(\"video/ogg\"):\r\n                case(\"video/webm\"):\r\n                    el = <video controls src={file} className=\"attached__media message__attachment\"></video>\r\n                    break;\r\n                default:\r\n                    el = <a href={file} target=\"_blank\">{file}</a>\r\n                    break;\r\n            }\r\n        }\r\n        return el;\r\n    }\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar className=\"message__avatar\" src={user.photo}/>\r\n            <div className=\"message__info\">\r\n                <h4>\r\n                    { user.displayName }\r\n                    <span className=\"message__timestamp\">\r\n                        {new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4>\r\n\r\n                <p>\r\n                    <Linkify properties={{target: '_blank', url: Linkify.MATCH}} >\r\n                        { message }\r\n                    </Linkify>\r\n                    { console.log(url) }\r\n                </p>\r\n                {verifyFile()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react'\r\nimport \"./ChatHeader.css\"\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\n\r\nfunction ChatHeader({ channelName }) {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader__left\">\r\n                <h3>\r\n                    <span className=\"chatHeader__hash\">#</span>\r\n                    { channelName }\r\n                </h3>\r\n            </div>\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon />\r\n                <EditLocationRoundedIcon />\r\n                <PeopleAltRoundedIcon />\r\n                <div className=\"chatHeader__search\">\r\n                    <input placeholder=\"Search\" />\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import React, { useEffect, useImperativeHandle, useRef, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Message from './Message'\r\nimport ChatHeader from './ChatHeader'\r\nimport { selectUser } from '../features/userSlice'\r\nimport { selectChannelId, selectChannelName, selectServerId, selectServerName } from '../features/appSlice'\r\nimport Picker from 'emoji-picker-react';\r\nimport './Chat.css'\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard'\r\nimport GifIcon from '@material-ui/icons/Gif'\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport db from '../firebase'\r\nimport firebase from 'firebase'\r\n\r\nfunction Chat() {\r\n    const dummy = useRef();\r\n    const user = useSelector(selectUser);\r\n    const serverId = useSelector(selectServerId);\r\n    const channelId = useSelector(selectChannelId);\r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setInput] = useState(() => {return \"\"});\r\n    const [messages, setMessages] = useState(() => {return []});\r\n    const [file, setFile] = useState(() => {return null});\r\n    const [placeholder, setPlaceholder] = useState(() => {return null});\r\n    const [emojiDisplay, setEmojiDisplay] = useState(() => {return \"none\"});\r\n    const fileSizeCap = 2097152; //Should also verify limit on backend\r\n    var storageRef = firebase.storage().ref();\r\n\r\n    function toggleEmojiPicker() {\r\n        (channelId && emojiDisplay == \"none\")?\r\n            setEmojiDisplay(\"flex\"):\r\n            setEmojiDisplay(\"none\");\r\n    }\r\n\r\n    useEffect(() => {\t\r\n        if (channelId) {\t\r\n            db.collection(\"servers/\" + serverId + \"/channels\")\t\r\n                .doc(channelId)\t\r\n                .collection(\"messages\")\t\r\n                .orderBy(\"timestamp\", \"asc\")\t\r\n                .onSnapshot((snapshot) =>\t\r\n                setMessages(snapshot.docs.map((doc) => doc.data()))\t\r\n                );\r\n            dummy.current.scrollIntoView({ behavior: 'smooth' });\t\r\n        }\t\r\n    }, [channelId]);\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        let fileRef = null;\r\n        let fileURL = null;\r\n        // Handle file attachment here\r\n        if(file){\r\n            if(file.size > fileSizeCap){\r\n                alert(\"File is over 2MB limit!\");\r\n                setFile(null);\r\n            }\r\n            else {\r\n                storageRef.child(user.displayName + \"-\" + file.name).getDownloadURL().then(onResolve, onReject);\r\n                function onReject() {\r\n                    fileRef = storageRef.child(user.displayName + \"-\" + file.name);\r\n                    console.log(file.size);\r\n                    fileRef.put(file)\r\n                    .then(async() => {\r\n                        fileURL = await fileRef.getDownloadURL();\r\n                        console.log(\"File has been uploaded\");\r\n                    })\r\n                    .then(async () => {\r\n                        await db.collection(\"servers/\" + serverId + \"/channels\").doc(channelId).collection(\"messages\").add({\t\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\r\n                            message: input,\t\r\n                            user: user,\t\r\n                            file: fileURL,\r\n                            fileType: file.type\r\n                        })\t\r\n                    })\r\n                    .then(() => {\r\n                        setFile(null);\r\n                    })\r\n                }\r\n            }\r\n\r\n            async function onResolve(foundURL) {\r\n                db.collection(\"servers/\" + serverId + \"/channels\").doc(channelId).collection(\"messages\").add({\t\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\r\n                    message: input,\t\r\n                    user: user,\t\r\n                    file: await foundURL,\r\n                    fileType: file.type\r\n                })\t\r\n                setFile(null);\r\n            }\r\n        }\r\n        // Otherwise, just send text\r\n        else if(!file && input && input.split(\" \").join(\"\") != \"\"){\r\n            db.collection(\"servers/\" + serverId + \"/channels\").doc(channelId).collection(\"messages\").add({\t\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\r\n                message: input,\t\r\n                user: user,\t\r\n                file: null\r\n            });\t\r\n            setFile(null);\r\n        }\r\n        setInput(\"\");\r\n        setPlaceholder(null);\r\n        dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={ channelName }/>\r\n\r\n            <div className=\"chat__messages\">\r\n                {\r\n                messages.map((message) => (\r\n                    <Message\t\r\n                        timestamp={message.timestamp}\t\r\n                        message={message.message}\t\r\n                        user={message.user}\t\r\n                        file={message.file}\r\n                        fileType={message.fileType}\r\n                    />\r\n                ))}\r\n                <div ref={dummy}></div>\r\n            </div>\r\n            <div id=\"emoji_picker\" style={{display: emojiDisplay}}>\r\n                <Picker onEmojiClick={(event, emojiObject) => { setInput(input + emojiObject.emoji)}} />\r\n            </div>\r\n\r\n            <div className=\"chat__input\">\r\n                <input type=\"file\" \r\n                        id=\"att_file\"\r\n                        name=\"att_file\" \r\n                        accept=\"image/x-png,image/gif,image/jpeg,image/bmp,audio/mpeg\"\r\n                        disabled = { !channelId } \r\n                        files={file} \r\n                        onChange={e => {\r\n                            setFile(e.target.files[0])\r\n                            setPlaceholder(e.target.files[0].name)\r\n                        }} />\r\n                {\r\n                    React.createElement(\r\n                        'label',\r\n                        {htmlFor: 'att_file'},\r\n                        <AddCircleIcon fontSize=\"large\" />\r\n                    )\r\n                }\r\n                <form>\r\n                    <input \r\n                        value={ input }\r\n                        disabled={ !channelId } \r\n                        onChange={ (e) => setInput(e.target.value) }\r\n                        placeholder={(placeholder)? placeholder: \"#Message \" + channelName} \r\n                    />\r\n                    <button \r\n                        disabled={ !channelId } \r\n                        className=\"chat__inputButton\" \r\n                        type=\"submit\"\r\n                        onClick={sendMessage}\r\n                    >\r\n                        Send Message\r\n                    </button>\r\n                </form>\r\n\r\n                <div className=\"chat__inputIcons\">\r\n                    <CardGiftcardIcon fontSize=\"large\" />\r\n                    <GifIcon fontSize=\"large\" />\r\n                    <EmojiEmotionsIcon onClick={toggleEmojiPicker} fontSize=\"large\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Button } from '@material-ui/core';\r\nimport { auth, provider } from \"../firebase\";\r\nimport React from 'react';\r\nimport './Login.css';\r\nfunction Login() {\r\n    const signIn = () => {\r\n        // google login\r\n        auth.signInWithPopup(provider)\r\n        .catch(error => alert(error.message));\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__logo\">\r\n                <img src={process.env.PUBLIC_URL + \"/main_logo.png\"} alt=\"app logo\"/>\r\n            </div>\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Sidebar from './components/Sidebar';\r\nimport Chat from './components/Chat';\r\nimport { selectUser, login, logout } from './features/userSlice'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Login from './components/Login';\r\nimport { auth } from './firebase';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {user? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n      ):(\r\n        <>\r\n          <Login />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}