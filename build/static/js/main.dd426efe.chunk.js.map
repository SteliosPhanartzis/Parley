{"version":3,"sources":["features/userSlice.js","features/appSlice.js","firebase.js","components/SidebarServer.js","components/SidebarChannel.js","components/Sidebar.js","components/Message.js","components/ChatHeader.js","components/Chat.js","components/Login.js","components/Modal.js","components/Members.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","appSlice","serverId","serverName","channelId","channelName","membersList","setServerInfo","setChannelInfo","setMembersList","selectServerId","app","selectServerName","selectChannelId","selectChannelName","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarServer","photo","channels","setChannels","dispatch","useSelector","useDispatch","className","onClick","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","channel","data","console","log","src","SidebarChannel","Sidebar","useState","servers","setServers","userCollection","useEffect","server","prompt","serverPhoto","add","administrators","displayName","uid","moderators","SignalCellularAltRounded","fontSize","Avatar","where","limit","forEach","update","status","signOut","then","window","location","reload","substring","Message","timestamp","message","file","fileType","Date","toDate","toUTCString","properties","target","url","Linkify","MATCH","el","controls","href","verifyFile","ChatHeader","placeholder","Chat","dummy","useRef","input","setInput","messages","setMessages","setFile","setPlaceholder","emojiDisplay","setEmojiDisplay","storageRef","storage","ref","current","scrollIntoView","behavior","style","display","onEmojiClick","event","emojiObject","emoji","type","accept","disabled","files","value","onChange","e","React","createElement","htmlFor","preventDefault","fileRef","fileURL","onResolve","foundURL","a","FieldValue","serverTimestamp","size","alert","child","getDownloadURL","put","split","join","Login","alt","Button","signInWithPopup","catch","error","Modal","displayState","displayHook","content","Members","members","setMembers","member","App","modalDisplay","setModalDisplay","onAuthStateChanged","authUser","docRef","get","length","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd426efe.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    serverId: null,\r\n    serverName: null,\r\n    channelId: null,\r\n    channelName: null,\r\n    membersList: []\r\n  },\r\n  reducers: {\r\n    setServerInfo: (state, action) => {\r\n      state.serverId = action.payload.serverId;\r\n      state.serverName = action.payload.serverName;\r\n      state.channelId = null;\r\n      state.channelName = null;\r\n    },\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    },\r\n    setMembersList: (state, action) => {\r\n      state.membersList += action.payload.membersList;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setServerInfo, setChannelInfo, setMembersList} = appSlice.actions;\r\n\r\nexport const selectServerId = state => state.app.serverId;\r\nexport const selectServerName = state => state.app.serverName;\r\nexport const selectChannelId = state => state.app.channelId;\r\nexport const selectChannelName = state => state.app.channelName;\r\nexport const selectMembersList = state => state.app.membersList;\r\n\r\nexport default appSlice.reducer;\r\n","import firebase from \"firebase\";\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB05OmarqivGc5YTKUATgzXJ8Nz_IOuv9M\",\r\n    authDomain: \"discord-clone-75157.firebaseapp.com\",\r\n    projectId: \"discord-clone-75157\",\r\n    storageBucket: \"discord-clone-75157.appspot.com\",\r\n    messagingSenderId: \"538671599107\",\r\n    appId: \"1:538671599107:web:1fe145eaebf8df167f8836\",\r\n    measurementId: \"G-XDTQKXKTD7\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export { auth, provider };\r\n  export default db;","import React from 'react';\r\nimport './SidebarServer.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { setServerInfo } from '../features/appSlice';\r\nimport db from '../firebase';\r\nfunction SidebarServer({serverId, serverName, photo, channels, setChannels}) {\r\n    const user = useSelector(selectUser);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div key={serverId} className=\"sidebar__server\" \r\n            onClick={ () => {\r\n                dispatch(\r\n                    setServerInfo({\r\n                        serverId: serverId,\r\n                        serverName: serverName,\r\n                    })\r\n                )\r\n                db.collection('servers/' + serverId + '/channels')\r\n                    .orderBy(\"channelName\", \"asc\")\r\n                    .onSnapshot(snapshot => (\r\n                        setChannels(snapshot.docs.map(doc => ({\r\n                            id: doc.id,\r\n                            channel: doc.data(),\r\n                        })))\r\n                    ))\r\n                    console.log(channels);\r\n            }}\r\n            >\r\n            <img id={serverId} name={serverName} src={(photo)?photo:\"\"} className=\"sidebar__serverImg\" />\t\t\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarServer\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChannelInfo } from '../features/appSlice';\r\nimport \"./SidebarChannel.css\";\r\n\r\nfunction SidebarChannel({ id, channelName }) {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div key={id} className=\"sidebarChannel\" \r\n            onClick={ () => \r\n                dispatch(\r\n                    setChannelInfo({\r\n                        channelId: id,\r\n                        channelName: channelName,\r\n                    })\r\n                )\r\n            }\r\n        >\r\n            <h4>\r\n                <span className=\"sidebarChannel__hash\">#</span>{ channelName }\r\n            </h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarChannel\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport SidebarServer from './SidebarServer';\r\nimport './Sidebar.css'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport { SignalCellularAltRounded } from '@material-ui/icons';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport { Avatar } from '@material-ui/core';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport db, { auth } from '../firebase';\r\nimport { selectServerId, selectServerName } from '../features/appSlice';\r\n\r\nfunction Sidebar() {\r\n    const user = useSelector(selectUser);\r\n    const [channels, setChannels] = useState([]);\r\n    const [servers, setServers] = useState([]);\r\n    const serverId = useSelector(selectServerId);\r\n    const serverName = useSelector(selectServerName);\r\n    let userCollection = db.collection(\"users\");\r\n\r\n    useEffect(() => {\r\n        db.collection('servers')\r\n        .orderBy(\"serverName\", \"asc\")\r\n        .onSnapshot(snapshot => (\r\n            setServers(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                server: doc.data(),\r\n            })))\r\n        ));\r\n    }, []);\r\n\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt('Enter a new channel')\r\n        if(serverId && channelName) {\r\n            db.collection(\"servers/\" + serverId + \"/channels\").add({\r\n                channelName: channelName,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleAddServer = () => {\r\n        const serverName = prompt('Enter a new server')\r\n\r\n        if(serverName) {\r\n            const serverPhoto = prompt('Enter photo URL')\r\n            if(serverPhoto){\r\n                db.collection(\"servers\").add({\r\n                serverName: serverName,\r\n                photo: serverPhoto,\r\n                administrators: [{displayName: user.displayName, uid: user.uid}],\r\n                moderators: []\r\n             })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar__panel\">\r\n        <div className=\"sidebar__serverList\">\r\n            {\r\n                servers.map((server) => (\r\n                    <SidebarServer \r\n                        serverId = {server.id} \r\n                        serverName = {server.server.serverName} \r\n                        photo = {server.server.photo} \r\n                        channels = {channels} \r\n                        setChannels = {setChannels} \r\n                    />\r\n                ))\r\n            }\r\n            <AddIcon onClick={handleAddServer} className=\"sidebar__addServer\" />  \r\n        </div>\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <h4>{serverName}</h4>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n                </div>\r\n                <div className=\"sidebar__channelsList\">\r\n                    {channels.map(({id, channel}) => (\r\n                            <SidebarChannel key={id} id={id} channelName={channel.channelName} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltRounded \r\n                    className=\"sidebar__voiceIcon\"\r\n                    fontSize=\"initial\"\r\n                />\r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar id=\"sidebar__avatar\" \r\n                    onClick={() => {\r\n                        userCollection.where(\"uid\", \"==\", user.uid).limit(1)\r\n                        .onSnapshot(snapshot => {\r\n                            snapshot.docs.forEach(doc => {\r\n                                userCollection.doc(doc.id).update({status: \"offline\"})\r\n                            })\r\n                        })\r\n                        auth.signOut()\r\n                        .then(setChannels([...channels, {\"id\":\"dummy\", \"channel\":{}}]))\r\n                        .then(window.location.reload());\r\n                        // Signout user, then update state to force page refresh, force window refresh to make sure\r\n                    }} \r\n                    src={user.photo}/>\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>\r\n                        {user.displayName}\r\n                    </h3>\r\n                    <p>\r\n                        #{user.uid.substring(0,10)}\r\n                    </p>\r\n                </div>\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport Linkify from 'react-linkify';\r\nimport \"./Message.css\"\r\n\r\nfunction Message({ timestamp, message, user, file, fileType }) {\r\n    let url = \"not defined\";\r\n    function verifyFile() {\r\n        let el = null;\r\n        if(file){\r\n            switch(fileType){\r\n                case(\"image/apng\"):\r\n                case(\"image/avif\"):\r\n                case(\"image/bmp\"):\r\n                case(\"image/gif\"):\r\n                case(\"image/jpeg\"):\r\n                case(\"image/png\"):\r\n                case(\"image/svg+xml\"):\r\n                case(\"image/webp\"):\r\n                case(\"image/x-icon\"):\r\n                    el = <img src={file} className=\"attached__media message__attachment\" />\r\n                    break;\r\n                case(\"audio/mpeg\"):\r\n                case(\"audio/ogg\"):\r\n                case(\"audio/wav\"):\r\n                    el = <audio controls className=\"message__attachment\"><source src={file}/>Audio tag unsupported</audio>\r\n                    break;\r\n                case(\"video/mp4\"):\r\n                case(\"video/ogg\"):\r\n                case(\"video/webm\"):\r\n                    el = <video controls src={file} className=\"attached__media message__attachment\"></video>\r\n                    break;\r\n                default:\r\n                    el = <a href={file} target=\"_blank\">{file}</a>\r\n                    break;\r\n            }\r\n        }\r\n        return el;\r\n    }\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar className=\"message__avatar\" src={user.photo}/>\r\n            <div className=\"message__info\">\r\n                <h4>\r\n                    { user.displayName }\r\n                    <span className=\"message__timestamp\">\r\n                        {new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4>\r\n\r\n                <p>\r\n                    <Linkify properties={{target: '_blank', url: Linkify.MATCH}} >\r\n                        { message }\r\n                    </Linkify>\r\n                    { console.log(url) }\r\n                </p>\r\n                {verifyFile()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react'\r\nimport \"./ChatHeader.css\"\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\n\r\nfunction ChatHeader({ channelName }) {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader__left\">\r\n                <h3>\r\n                    <span className=\"chatHeader__hash\">#</span>\r\n                    { channelName }\r\n                </h3>\r\n            </div>\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon />\r\n                <EditLocationRoundedIcon />\r\n                <PeopleAltRoundedIcon />\r\n                <div className=\"chatHeader__search\">\r\n                    <input placeholder=\"Search\" />\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n\r\n                <SendRoundedIcon />\r\n                <a href=\"https://github.com/SteliosPhanartzis/Parley\"><HelpRoundedIcon /></a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import React, { useEffect, useImperativeHandle, useRef, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Message from './Message'\r\nimport ChatHeader from './ChatHeader'\r\nimport { selectUser } from '../features/userSlice'\r\nimport { selectChannelId, selectChannelName, selectServerId, selectServerName } from '../features/appSlice'\r\nimport Picker from 'emoji-picker-react';\r\nimport './Chat.css'\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard'\r\nimport GifIcon from '@material-ui/icons/Gif'\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport db from '../firebase'\r\nimport firebase from 'firebase'\r\n\r\nfunction Chat() {\r\n    const dummy = useRef();\r\n    const user = useSelector(selectUser);\r\n    const serverId = useSelector(selectServerId);\r\n    const channelId = useSelector(selectChannelId);\r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setInput] = useState(() => {return \"\"});\r\n    const [messages, setMessages] = useState(() => {return []});\r\n    const [file, setFile] = useState(null);\r\n    const [placeholder, setPlaceholder] = useState(() => {return null});\r\n    const [emojiDisplay, setEmojiDisplay] = useState(() => {return \"none\"});\r\n    const fileSizeCap = 2097152; //Should also verify limit on backend\r\n    const storageRef = firebase.storage().ref();\r\n\r\n    function toggleEmojiPicker() {\r\n        (channelId && emojiDisplay == \"none\")?\r\n            setEmojiDisplay(\"flex\"):\r\n            setEmojiDisplay(\"none\");\r\n    }\r\n\r\n    useEffect(() => {\t\r\n        if (channelId) {\t\r\n            db.collection(\"servers/\" + serverId + \"/channels/\" + channelId + \"/messages\")\t\r\n                .orderBy(\"timestamp\", \"asc\")\t\r\n                .onSnapshot((snapshot) =>\t\r\n                setMessages(snapshot.docs.map((doc) => doc.data()))\t\r\n                );\r\n            dummy.current.scrollIntoView({ behavior: 'smooth' });\t\r\n        }\t\r\n    }, [channelId]);\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        let fileRef = null;\r\n        let fileURL = null;\r\n        // Handle file attachment here\r\n        if(file){\r\n            if(file.size > fileSizeCap){\r\n                alert(\"File is over 2MB limit!\");\r\n                setFile(null);\r\n            }\r\n            else {\r\n                storageRef.child(user.displayName + \"-\" + file.name).getDownloadURL().then(onResolve, onReject);\r\n                function onReject() {\r\n                    fileRef = storageRef.child(user.displayName + \"-\" + file.name);\r\n                    console.log(file.size);\r\n                    fileRef.put(file)\r\n                    .then(async() => {\r\n                        fileURL = await fileRef.getDownloadURL();\r\n                        console.log(\"File has been uploaded\");\r\n                    })\r\n                    .then(async () => {\r\n                        await db.collection(\"servers/\" + serverId + \"/channels/\" + channelId + \"/messages\").add({\t\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\r\n                            message: input,\t\r\n                            user: user,\t\r\n                            file: fileURL,\r\n                            fileType: file.type\r\n                        })\t\r\n                    })\r\n                    .then(() => {\r\n                        setFile(null);\r\n                    })\r\n                }\r\n            }\r\n\r\n            async function onResolve(foundURL) {\r\n                db.collection(\"servers/\" + serverId + \"/channels\").doc(channelId).collection(\"messages\").add({\t\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\r\n                    message: input,\t\r\n                    user: user,\t\r\n                    file: await foundURL,\r\n                    fileType: file.type\r\n                })\t\r\n                setFile(null);\r\n            }\r\n        }\r\n        // Otherwise, just send text\r\n        else if(!file && input && input.split(\" \").join(\"\") != \"\"){\r\n            db.collection(\"servers/\" + serverId + \"/channels\").doc(channelId).collection(\"messages\").add({\t\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\r\n                message: input,\t\r\n                user: user,\t\r\n                file: null\r\n            });\t\r\n            setFile(null);\r\n        }\r\n        setInput(\"\");\r\n        setPlaceholder(null);\r\n        dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={ channelName }/>\r\n\r\n            <div className=\"chat__messages\">\r\n                {\r\n                messages.map((message) => (\r\n                    <Message\t\r\n                        timestamp={message.timestamp}\t\r\n                        message={message.message}\t\r\n                        user={message.user}\t\r\n                        file={message.file}\r\n                        fileType={message.fileType}\r\n                    />\r\n                ))}\r\n                <div ref={dummy}></div>\r\n            </div>\r\n            <div id=\"emoji_picker\" style={{display: emojiDisplay}}>\r\n                <Picker onEmojiClick={(event, emojiObject) => { setInput(input + emojiObject.emoji)}} />\r\n            </div>\r\n\r\n            <div className=\"chat__input\">\r\n                <input type=\"file\" \r\n                        id=\"att_file\"\r\n                        name=\"att_file\" \r\n                        accept=\"image/x-png,image/gif,image/jpeg,image/bmp,audio/mpeg\"\r\n                        disabled = { !channelId } \r\n                        files={ file }\r\n                        value={() => {return (file)? file.name :\"\" }} \r\n                        onChange={e => {\r\n                            if (e.target.files[0]){\r\n                                setFile(e.target.files[0])\r\n                                setPlaceholder(e.target.files[0].name)\r\n                            } else {\r\n                                console.log(\"File action cancelled\")\r\n                            }\r\n                        }} />\r\n                {\r\n                    React.createElement(\r\n                        'label',\r\n                        {htmlFor: 'att_file'},\r\n                        <AddCircleIcon fontSize=\"large\" />\r\n                    )\r\n                }\r\n                <form>\r\n                    <input \r\n                        value={ input }\r\n                        disabled={ !channelId } \r\n                        onChange={ (e) => setInput(e.target.value) }\r\n                        placeholder={(placeholder)? placeholder: \"#Message \" + channelName} \r\n                    />\r\n                    <button \r\n                        disabled={ !channelId } \r\n                        className=\"chat__inputButton\" \r\n                        type=\"submit\"\r\n                        onClick={sendMessage}\r\n                    >\r\n                        Send Message\r\n                    </button>\r\n                </form>\r\n\r\n                <div className=\"chat__inputIcons\">\r\n                    <CardGiftcardIcon fontSize=\"large\" />\r\n                    <GifIcon fontSize=\"large\" />\r\n                    <EmojiEmotionsIcon onClick={toggleEmojiPicker} fontSize=\"large\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import { Button } from '@material-ui/core';\r\nimport { auth, provider } from \"../firebase\";\r\nimport React from 'react';\r\nimport './Login.css';\r\nfunction Login() {\r\n    const signIn = () => {\r\n        // google login\r\n        auth.signInWithPopup(provider)\r\n        .catch(error => alert(error.message));\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__logo\">\r\n                <img src={process.env.PUBLIC_URL + \"/main_logo.png\"} alt=\"app logo\"/>\r\n            </div>\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\nimport './Modal.css'\r\nfunction Modal({displayState, displayHook, content}) {\r\n    return (\r\n        <div className=\"modal\" style={{display: displayState}}>\r\n            <div className=\"modal__content\">\r\n                <span type=\"button\" className=\"modal__close\" onClick={()=>{displayHook(\"none\")}}>╳</span>\r\n                { content }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal","import { Avatar } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectMembersList, setMembersList } from '../features/appSlice';\r\nimport { selectUser } from '../features/userSlice';\r\nimport db from '../firebase';\r\nimport './Members.css'\r\n\r\nfunction Members() {\r\n    // const membersList = useSelector(selectMembersList);\r\n    let userCollection = db.collection(\"users\");\r\n    const [members, setMembers] = useState([]);\r\n    // const user = useSelector(selectUser);\r\n    useEffect(() => {\r\n        userCollection.onSnapshot(snapshot => (\r\n            setMembers(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                user: doc.data()\r\n            })))\r\n        ))\r\n    }, []);\r\n        // if (membersList)\r\n            // membersList.array.forEach(member => {\r\n                // if(member.status == \"online\")\r\n            // })\r\n    return (\r\n        <div className=\"members\">\r\n            {/* Pull users in specified server / channel from firebase and iterate for each list */}\r\n            <div className=\"members__list\">\r\n                <p>USERS</p>\r\n                {\r\n                    members.map((member) => (\r\n                        <div key={member.user.uid + member.user.status} className={(member.user.status == \"online\")? \"active\":\"inactive\"}>\r\n                            <Avatar src={member.user.photo} />\r\n                            <p>{member.user.displayName}</p>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n            {/* <div className=\"members__list\"> */}\r\n                {/* <p>OFFLINE</p> */}\r\n            {/* </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Members\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Sidebar from './components/Sidebar';\r\nimport Chat from './components/Chat';\r\nimport { selectUser, login, logout } from './features/userSlice'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Login from './components/Login';\r\nimport db, { auth } from './firebase';\r\nimport Modal from './components/Modal'\r\nimport Members from './components/Members';\r\nimport firebase from 'firebase'\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n  const [modalDisplay, setModalDisplay] = useState(\"none\");\r\n  function toggleModal(){\r\n    (modalDisplay == \"none\")?\r\n      setModalDisplay(\"flex\")\r\n      :setModalDisplay(\"none\")\r\n  }\r\n  \r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(async (authUser) => {\r\n      let userCollection = db.collection(\"users\");\r\n      if (authUser) {\r\n        let docRef = userCollection.where(\"uid\", \"==\", authUser.uid).limit(1).get();\r\n        await docRef.then((snapshot) => {\r\n          console.log(authUser)\r\n          if(snapshot.docs.length == 0){\r\n            userCollection.add({\r\n              uid: authUser.uid,\r\n              displayName: authUser.displayName,\r\n              photo: authUser.photoURL,\r\n              status: \"online\"\r\n            })\r\n          }\r\n          else\r\n          snapshot.forEach((doc) => {\r\n              userCollection.doc(doc.id).update({status: \"online\"})\r\n              return;\r\n            })\r\n        })\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n            status: \"online\"\r\n          })\r\n        );\r\n      } else {\r\n          if(user){\r\n            await dispatch(logout());\r\n          }\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {user? (\r\n        <>\r\n          <Sidebar/>\r\n          <Chat />\r\n          <Members />\r\n          <Modal displayState={modalDisplay} displayHook={setModalDisplay} />\r\n        </>\r\n      ):(\r\n        <>\r\n          <Login />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}