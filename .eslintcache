[{"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\index.js":"1","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\App.js":"2","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\serviceWorker.js":"3","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\app\\store.js":"4","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\firebase.js":"5","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\features\\userSlice.js":"6","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\Sidebar.js":"7","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\Chat.js":"8","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\Login.js":"9","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\features\\appSlice.js":"10","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\SidebarServer.js":"11","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\SidebarChannel.js":"12","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\Message.js":"13","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\ChatHeader.js":"14"},{"size":644,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":1070,"mtime":1607830575725,"results":"17","hashOfConfig":"16"},{"size":5141,"mtime":1607927137618,"results":"18","hashOfConfig":"16"},{"size":255,"mtime":1607649429788,"results":"19","hashOfConfig":"16"},{"size":722,"mtime":1607601580000,"results":"20","hashOfConfig":"16"},{"size":460,"mtime":1607656298957,"results":"21","hashOfConfig":"16"},{"size":4899,"mtime":1608198259807,"results":"22","hashOfConfig":"16"},{"size":5232,"mtime":1608347584242,"results":"23","hashOfConfig":"16"},{"size":613,"mtime":1607840021634,"results":"24","hashOfConfig":"16"},{"size":978,"mtime":1607841708630,"results":"25","hashOfConfig":"16"},{"size":1325,"mtime":1608196190560,"results":"26","hashOfConfig":"16"},{"size":737,"mtime":1607830786404,"results":"27","hashOfConfig":"16"},{"size":638,"mtime":1607935275149,"results":"28","hashOfConfig":"16"},{"size":1274,"mtime":1607826830500,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"2m9nlk",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\index.js",[],["62","63"],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\App.js",[],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\serviceWorker.js",[],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\app\\store.js",[],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\firebase.js",[],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\features\\userSlice.js",[],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\Sidebar.js",[],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\Chat.js",["64","65","66","67","68"],"import React, { useEffect, useImperativeHandle, useRef, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Message from './Message'\r\nimport ChatHeader from './ChatHeader'\r\nimport { selectUser } from '../features/userSlice'\r\nimport { selectChannelId, selectChannelName, selectServerId, selectServerName } from '../features/appSlice'\r\nimport Picker from 'emoji-picker-react';\r\nimport './Chat.css'\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard'\r\nimport GifIcon from '@material-ui/icons/Gif'\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport db from '../firebase'\r\nimport firebase from 'firebase'\r\n\r\nfunction Chat() {\r\n    const dummy = useRef();\r\n    const user = useSelector(selectUser);\r\n    const serverId = useSelector(selectServerId);\r\n    const channelId = useSelector(selectChannelId);\r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setInput] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [file, setFile] = useState(null);\r\n    const [placeholder, setPlaceholder] = useState(\"#Message \" + channelName);\r\n    const [emojiDisplay, setEmojiDisplay] = useState(\"none\");\r\n\r\n    function toggleEmojiPicker() {\r\n        if(emojiDisplay == \"none\")\r\n            setEmojiDisplay(\"flex\");\r\n        else\r\n            setEmojiDisplay(\"none\");\r\n\r\n    }\r\n\r\n    useEffect(() => {\t\r\n        if (channelId) {\t\r\n            db.collection(\"servers/\" + serverId + \"/channels\")\t\r\n                .doc(channelId)\t\r\n                .collection(\"messages\")\t\r\n                .orderBy(\"timestamp\", \"asc\")\t\r\n                .onSnapshot((snapshot) =>\t\r\n                setMessages(snapshot.docs.map((doc) => doc.data()))\t\r\n                );\r\n            dummy.current.scrollIntoView({ behavior: 'smooth' });\t\r\n        }\t\r\n    }, [channelId]);\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        // Handle file attachment here\r\n        // if(file){\r\n        //     db.collection(\"servers/\" + serverId + \"/channels\").doc(channelId).collection(\"messages\").add({\t\r\n        //         timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\r\n        //         message: file,\t\r\n        //         user: user,\t\r\n        //     });\t\r\n        // }\r\n        // Otherwise, just send text\r\n        if(input && input.split(\" \").join(\"\") != \"\"){\r\n            db.collection(\"servers/\" + serverId + \"/channels\").doc(channelId).collection(\"messages\").add({\t\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\r\n                message: input,\t\r\n                user: user,\t\r\n            });\t\r\n        }\r\n        setInput(\"\");\r\n        setFile(null);\r\n        setPlaceholder(\"#Message \" + channelName);\t\r\n        dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={ channelName }/>\r\n\r\n            <div className=\"chat__messages\">\r\n                {\r\n                messages.map((message) => (\r\n                    <Message\t\r\n                        timestamp={message.timestamp}\t\r\n                        message={message.message}\t\r\n                        user={message.user}\t\r\n                    />\r\n                ))}\r\n                <div ref={dummy}></div>\r\n            </div>\r\n            <div id=\"emoji_picker\" style={{display: emojiDisplay}}>\r\n                <Picker onEmojiClick={(event, emojiObject) => { setInput(input + emojiObject.emoji)}} />\r\n            </div>\r\n\r\n            <div className=\"chat__input\">\r\n                <input type=\"file\" \r\n                        id=\"att_file\"\r\n                        name=\"att_file\" \r\n                        accept=\"image/x-png,image/gif,image/jpeg\"\r\n                        files={file} onChange={e => {\r\n                            setFile(e.target.files[0])\r\n                            setPlaceholder(e.target.files[0].name)\r\n                        }} />\r\n                {\r\n                    React.createElement(\r\n                        'label',\r\n                        {htmlFor: 'att_file'},\r\n                        <AddCircleIcon fontSize=\"large\" />\r\n                    )\r\n                }\r\n                <form>\r\n                    <input \r\n                        value={ input }\r\n                        disabled={ !channelId } \r\n                        onChange={ (e) => setInput(e.target.value) }\r\n                        placeholder={placeholder} \r\n                    />\r\n                    <button \r\n                        disabled={ !channelId } \r\n                        className=\"chat__inputButton\" \r\n                        type=\"submit\"\r\n                        onClick={sendMessage}\r\n                    >\r\n                        Send Message\r\n                    </button>\r\n                </form>\r\n\r\n                <div className=\"chat__inputIcons\">\r\n                    <CardGiftcardIcon fontSize=\"large\" />\r\n                    <GifIcon fontSize=\"large\" />\r\n                    <EmojiEmotionsIcon onClick={toggleEmojiPicker} fontSize=\"large\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\Login.js",[],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\features\\appSlice.js",[],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\SidebarServer.js",["69","70"],"import React from 'react';\r\nimport './SidebarServer.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { setServerInfo } from '../features/appSlice';\r\nimport db from '../firebase';\r\nfunction SidebarServer({serverId, serverName, photo, channels, setChannels}) {\r\n    const user = useSelector(selectUser);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"sidebar__server\" \r\n            onClick={ () => {\r\n                dispatch(\r\n                    setServerInfo({\r\n                        serverId: serverId,\r\n                        serverName: serverName,\r\n                    })\r\n                )\r\n                db.collection('servers/' + serverId + '/channels')\r\n                    .orderBy(\"channelName\", \"asc\")\r\n                    .onSnapshot(snapshot => (\r\n                        setChannels(snapshot.docs.map(doc => ({\r\n                            id: doc.id,\r\n                            channel: doc.data(),\r\n                        })))\r\n                    ))\r\n                    console.log(channels);\r\n            }}\r\n            >\r\n            <img id={serverId} name={serverName} src={(photo)?photo:\"\"} className=\"sidebar__serverImg\" />\t\t\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarServer\r\n","C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\SidebarChannel.js",[],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\Message.js",[],"C:\\Users\\steli\\Desktop\\WebDev\\Parley\\src\\components\\ChatHeader.js",[],["71","72"],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":28,"nodeType":"79","messageId":"80","endLine":1,"endColumn":47},{"ruleId":"77","severity":1,"message":"81","line":6,"column":62,"nodeType":"79","messageId":"80","endLine":6,"endColumn":78},{"ruleId":"82","severity":1,"message":"83","line":29,"column":25,"nodeType":"84","messageId":"85","endLine":29,"endColumn":27},{"ruleId":"86","severity":1,"message":"87","line":47,"column":8,"nodeType":"88","endLine":47,"endColumn":19,"suggestions":"89"},{"ruleId":"82","severity":1,"message":"90","line":60,"column":47,"nodeType":"84","messageId":"85","endLine":60,"endColumn":49},{"ruleId":"77","severity":1,"message":"91","line":8,"column":11,"nodeType":"79","messageId":"80","endLine":8,"endColumn":15},{"ruleId":"92","severity":1,"message":"93","line":31,"column":13,"nodeType":"94","endLine":31,"endColumn":106},{"ruleId":"73","replacedBy":"95"},{"ruleId":"75","replacedBy":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'useImperativeHandle' is defined but never used.","Identifier","unusedVar","'selectServerName' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'serverId'. Either include it or remove the dependency array.","ArrayExpression",["99"],"Expected '!==' and instead saw '!='.","'user' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["97"],["98"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},"Update the dependencies array to be: [channelId, serverId]",{"range":"102","text":"103"},[1890,1901],"[channelId, serverId]"]