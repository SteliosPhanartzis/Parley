[{"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\index.js":"1","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\serviceWorker.js":"2","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\App.js":"3","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\app\\store.js":"4","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\firebase.js":"5","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Sidebar.js":"6","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Modal.js":"7","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Login.js":"8","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Chat.js":"9","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Members.js":"10","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\features\\userSlice.js":"11","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\features\\appSlice.js":"12","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\SidebarServer.js":"13","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\SidebarChannel.js":"14","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Message.js":"15","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\ChatHeader.js":"16"},{"size":623,"mtime":1611479910396,"results":"17","hashOfConfig":"18"},{"size":5141,"mtime":1611479910396,"results":"19","hashOfConfig":"18"},{"size":2117,"mtime":1611483111444,"results":"20","hashOfConfig":"18"},{"size":245,"mtime":1611479910386,"results":"21","hashOfConfig":"18"},{"size":704,"mtime":1611479910395,"results":"22","hashOfConfig":"18"},{"size":5425,"mtime":1611483401136,"results":"23","hashOfConfig":"18"},{"size":423,"mtime":1611479910391,"results":"24","hashOfConfig":"18"},{"size":592,"mtime":1611479910389,"results":"25","hashOfConfig":"18"},{"size":7227,"mtime":1611479910387,"results":"26","hashOfConfig":"18"},{"size":1714,"mtime":1611479910390,"results":"27","hashOfConfig":"18"},{"size":439,"mtime":1611482118771,"results":"28","hashOfConfig":"18"},{"size":1148,"mtime":1611479910394,"results":"29","hashOfConfig":"18"},{"size":1304,"mtime":1611479910394,"results":"30","hashOfConfig":"18"},{"size":719,"mtime":1611479910393,"results":"31","hashOfConfig":"18"},{"size":2163,"mtime":1611479910391,"results":"32","hashOfConfig":"18"},{"size":1297,"mtime":1611479910388,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"4qsnrt",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\index.js",[],["71","72"],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\serviceWorker.js",[],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\App.js",["73","74","75","76","77"],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\app\\store.js",[],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\firebase.js",[],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Sidebar.js",[],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Modal.js",[],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Login.js",[],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Chat.js",["78","79","80","81","82"],"import React, { useEffect, useImperativeHandle, useRef, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport Message from './Message'\nimport ChatHeader from './ChatHeader'\nimport { selectUser } from '../features/userSlice'\nimport { selectChannelId, selectChannelName, selectServerId, selectServerName } from '../features/appSlice'\nimport Picker from 'emoji-picker-react';\nimport './Chat.css'\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard'\nimport GifIcon from '@material-ui/icons/Gif'\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport db from '../firebase'\nimport firebase from 'firebase'\n\nfunction Chat() {\n    const dummy = useRef();\n    const user = useSelector(selectUser);\n    const serverId = useSelector(selectServerId);\n    const channelId = useSelector(selectChannelId);\n    const channelName = useSelector(selectChannelName);\n    const [input, setInput] = useState(() => {return \"\"});\n    const [messages, setMessages] = useState(() => {return []});\n    const [file, setFile] = useState(null);\n    const [placeholder, setPlaceholder] = useState(() => {return null});\n    const [emojiDisplay, setEmojiDisplay] = useState(() => {return \"none\"});\n    const fileSizeCap = 2097152; //Should also verify limit on backend\n    const storageRef = firebase.storage().ref();\n\n    function toggleEmojiPicker() {\n        (channelId && emojiDisplay == \"none\")?\n            setEmojiDisplay(\"flex\"):\n            setEmojiDisplay(\"none\");\n    }\n\n    useEffect(() => {\t\n        if (channelId) {\t\n            db.collection(\"servers/\" + serverId + \"/channels/\" + channelId + \"/messages\")\t\n                .orderBy(\"timestamp\", \"asc\")\t\n                .onSnapshot((snapshot) =>\t\n                setMessages(snapshot.docs.map((doc) => doc.data()))\t\n                );\n            dummy.current.scrollIntoView({ behavior: 'smooth' });\t\n        }\t\n    }, [channelId]);\n    const sendMessage = (e) => {\n        e.preventDefault();\n        let fileRef = null;\n        let fileURL = null;\n        // Handle file attachment here\n        if(file){\n            if(file.size > fileSizeCap){\n                alert(\"File is over 2MB limit!\");\n                setFile(null);\n            }\n            else {\n                storageRef.child(user.displayName + \"-\" + file.name).getDownloadURL().then(onResolve, onReject);\n                function onReject() {\n                    fileRef = storageRef.child(user.displayName + \"-\" + file.name);\n                    console.log(file.size);\n                    fileRef.put(file)\n                    .then(async() => {\n                        fileURL = await fileRef.getDownloadURL();\n                        console.log(\"File has been uploaded\");\n                    })\n                    .then(async () => {\n                        await db.collection(\"servers/\" + serverId + \"/channels/\" + channelId + \"/messages\").add({\t\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\n                            message: input,\t\n                            user: user,\t\n                            file: fileURL,\n                            fileType: file.type\n                        })\t\n                    })\n                    .then(() => {\n                        setFile(null);\n                    })\n                }\n            }\n\n            async function onResolve(foundURL) {\n                db.collection(\"servers/\" + serverId + \"/channels\").doc(channelId).collection(\"messages\").add({\t\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\n                    message: input,\t\n                    user: user,\t\n                    file: await foundURL,\n                    fileType: file.type\n                })\t\n                setFile(null);\n            }\n        }\n        // Otherwise, just send text\n        else if(!file && input && input.split(\" \").join(\"\") != \"\"){\n            db.collection(\"servers/\" + serverId + \"/channels\").doc(channelId).collection(\"messages\").add({\t\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\t\n                message: input,\t\n                user: user,\t\n                file: null\n            });\t\n            setFile(null);\n        }\n        setInput(\"\");\n        setPlaceholder(null);\n        dummy.current.scrollIntoView({ behavior: 'smooth' });\n    };\n\n    return (\n        <div className=\"chat\">\n            <ChatHeader channelName={ channelName }/>\n\n            <div className=\"chat__messages\">\n                {\n                messages.map((message) => (\n                    <Message\t\n                        timestamp={message.timestamp}\t\n                        message={message.message}\t\n                        user={message.user}\t\n                        file={message.file}\n                        fileType={message.fileType}\n                    />\n                ))}\n                <div ref={dummy}></div>\n            </div>\n            <div id=\"emoji_picker\" style={{display: emojiDisplay}}>\n                <Picker onEmojiClick={(event, emojiObject) => { setInput(input + emojiObject.emoji)}} />\n            </div>\n\n            <div className=\"chat__input\">\n                <input type=\"file\" \n                        id=\"att_file\"\n                        name=\"att_file\" \n                        accept=\"image/x-png,image/gif,image/jpeg,image/bmp,audio/mpeg\"\n                        disabled = { !channelId } \n                        files={ file }\n                        value={() => {return (file)? file.name :\"\" }} \n                        onChange={e => {\n                            if (e.target.files[0]){\n                                setFile(e.target.files[0])\n                                setPlaceholder(e.target.files[0].name)\n                            } else {\n                                console.log(\"File action cancelled\")\n                            }\n                        }} />\n                {\n                    React.createElement(\n                        'label',\n                        {htmlFor: 'att_file'},\n                        <AddCircleIcon fontSize=\"large\" />\n                    )\n                }\n                <form>\n                    <input \n                        value={ input }\n                        disabled={ !channelId } \n                        onChange={ (e) => setInput(e.target.value) }\n                        placeholder={(placeholder)? placeholder: \"#Message \" + channelName} \n                    />\n                    <button \n                        disabled={ !channelId } \n                        className=\"chat__inputButton\" \n                        type=\"submit\"\n                        onClick={sendMessage}\n                    >\n                        Send Message\n                    </button>\n                </form>\n\n                <div className=\"chat__inputIcons\">\n                    <CardGiftcardIcon fontSize=\"large\" />\n                    <GifIcon fontSize=\"large\" />\n                    <EmojiEmotionsIcon onClick={toggleEmojiPicker} fontSize=\"large\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Members.js",["83","84","85","86","87","88"],"import { Avatar } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux';\nimport { selectMembersList, setMembersList } from '../features/appSlice';\nimport { selectUser } from '../features/userSlice';\nimport db from '../firebase';\nimport './Members.css'\n\nfunction Members() {\n    // const membersList = useSelector(selectMembersList);\n    let userCollection = db.collection(\"users\");\n    const [members, setMembers] = useState([]);\n    // const user = useSelector(selectUser);\n    useEffect(() => {\n        userCollection.onSnapshot(snapshot => (\n            setMembers(snapshot.docs.map(doc => ({\n                id: doc.id,\n                user: doc.data()\n            })))\n        ))\n    }, []);\n        // if (membersList)\n            // membersList.array.forEach(member => {\n                // if(member.status == \"online\")\n            // })\n    return (\n        <div className=\"members\">\n            {/* Pull users in specified server / channel from firebase and iterate for each list */}\n            <div className=\"members__list\">\n                <p>USERS</p>\n                {\n                    members.map((member) => (\n                        <div key={member.user.uid + member.user.status} className={(member.user.status == \"online\")? \"active\":\"inactive\"}>\n                            <Avatar src={member.user.photo} />\n                            <p>{member.user.displayName}</p>\n                        </div>\n                    ))\n                }\n            </div>\n            {/* <div className=\"members__list\"> */}\n                {/* <p>OFFLINE</p> */}\n            {/* </div> */}\n        </div>\n    )\n}\n\nexport default Members\n","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\features\\userSlice.js",[],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\features\\appSlice.js",[],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\SidebarServer.js",["89","90"],"import React from 'react';\nimport './SidebarServer.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectUser } from '../features/userSlice';\nimport { setServerInfo } from '../features/appSlice';\nimport db from '../firebase';\nfunction SidebarServer({serverId, serverName, photo, channels, setChannels}) {\n    const user = useSelector(selectUser);\n    const dispatch = useDispatch();\n\n    return (\n        <div key={serverId} className=\"sidebar__server\" \n            onClick={ () => {\n                dispatch(\n                    setServerInfo({\n                        serverId: serverId,\n                        serverName: serverName,\n                    })\n                )\n                db.collection('servers/' + serverId + '/channels')\n                    .orderBy(\"channelName\", \"asc\")\n                    .onSnapshot(snapshot => (\n                        setChannels(snapshot.docs.map(doc => ({\n                            id: doc.id,\n                            channel: doc.data(),\n                        })))\n                    ))\n                    console.log(channels);\n            }}\n            >\n            <img id={serverId} name={serverName} src={(photo)?photo:\"\"} className=\"sidebar__serverImg\" />\t\t\n        </div>\n    )\n}\n\nexport default SidebarServer\n","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\SidebarChannel.js",[],"C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\Message.js",["91","92"],"import { Avatar } from '@material-ui/core'\nimport React from 'react'\nimport Linkify from 'react-linkify';\nimport \"./Message.css\"\n\nfunction Message({ timestamp, message, user, file, fileType }) {\n    let url = \"not defined\";\n    function verifyFile() {\n        let el = null;\n        if(file){\n            switch(fileType){\n                case(\"image/apng\"):\n                case(\"image/avif\"):\n                case(\"image/bmp\"):\n                case(\"image/gif\"):\n                case(\"image/jpeg\"):\n                case(\"image/png\"):\n                case(\"image/svg+xml\"):\n                case(\"image/webp\"):\n                case(\"image/x-icon\"):\n                    el = <img src={file} className=\"attached__media message__attachment\" />\n                    break;\n                case(\"audio/mpeg\"):\n                case(\"audio/ogg\"):\n                case(\"audio/wav\"):\n                    el = <audio controls className=\"message__attachment\"><source src={file}/>Audio tag unsupported</audio>\n                    break;\n                case(\"video/mp4\"):\n                case(\"video/ogg\"):\n                case(\"video/webm\"):\n                    el = <video controls src={file} className=\"attached__media message__attachment\"></video>\n                    break;\n                default:\n                    el = <a href={file} target=\"_blank\">{file}</a>\n                    break;\n            }\n        }\n        return el;\n    }\n    return (\n        <div className=\"message\">\n            <Avatar className=\"message__avatar\" src={user.photo}/>\n            <div className=\"message__info\">\n                <h4>\n                    { user.displayName }\n                    <span className=\"message__timestamp\">\n                        {new Date(timestamp?.toDate()).toUTCString()}\n                    </span>\n                </h4>\n\n                <p>\n                    <Linkify properties={{target: '_blank', url: Linkify.MATCH}} >\n                        { message }\n                    </Linkify>\n                    { console.log(url) }\n                </p>\n                {verifyFile()}\n            </div>\n        </div>\n    )\n}\n\nexport default Message;\n","C:\\Users\\steli\\Documents\\WebDev\\Parley\\src\\components\\ChatHeader.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":11,"column":8,"nodeType":"99","messageId":"100","endLine":11,"endColumn":16},{"ruleId":"97","severity":1,"message":"101","line":17,"column":12,"nodeType":"99","messageId":"100","endLine":17,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":18,"column":19,"nodeType":"104","messageId":"105","endLine":18,"endColumn":21},{"ruleId":"102","severity":1,"message":"103","line":30,"column":35,"nodeType":"104","messageId":"105","endLine":30,"endColumn":37},{"ruleId":"106","severity":1,"message":"107","line":58,"column":6,"nodeType":"108","endLine":58,"endColumn":16,"suggestions":"109"},{"ruleId":"97","severity":1,"message":"110","line":1,"column":28,"nodeType":"99","messageId":"100","endLine":1,"endColumn":47},{"ruleId":"97","severity":1,"message":"111","line":6,"column":62,"nodeType":"99","messageId":"100","endLine":6,"endColumn":78},{"ruleId":"102","severity":1,"message":"103","line":31,"column":36,"nodeType":"104","messageId":"105","endLine":31,"endColumn":38},{"ruleId":"106","severity":1,"message":"112","line":45,"column":8,"nodeType":"108","endLine":45,"endColumn":19,"suggestions":"113"},{"ruleId":"102","severity":1,"message":"114","line":93,"column":61,"nodeType":"104","messageId":"105","endLine":93,"endColumn":63},{"ruleId":"97","severity":1,"message":"115","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":21},{"ruleId":"97","severity":1,"message":"116","line":4,"column":10,"nodeType":"99","messageId":"100","endLine":4,"endColumn":27},{"ruleId":"97","severity":1,"message":"117","line":4,"column":29,"nodeType":"99","messageId":"100","endLine":4,"endColumn":43},{"ruleId":"97","severity":1,"message":"118","line":5,"column":10,"nodeType":"99","messageId":"100","endLine":5,"endColumn":20},{"ruleId":"106","severity":1,"message":"119","line":21,"column":8,"nodeType":"108","endLine":21,"endColumn":10,"suggestions":"120"},{"ruleId":"102","severity":1,"message":"103","line":33,"column":104,"nodeType":"104","messageId":"105","endLine":33,"endColumn":106},{"ruleId":"97","severity":1,"message":"121","line":8,"column":11,"nodeType":"99","messageId":"100","endLine":8,"endColumn":15},{"ruleId":"122","severity":1,"message":"123","line":31,"column":13,"nodeType":"124","endLine":31,"endColumn":106},{"ruleId":"122","severity":1,"message":"123","line":21,"column":26,"nodeType":"124","endLine":21,"endColumn":92},{"ruleId":"125","severity":1,"message":"126","line":34,"column":41,"nodeType":"127","endLine":34,"endColumn":56},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","'toggleModal' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["130"],"'useImperativeHandle' is defined but never used.","'selectServerName' is defined but never used.","React Hook useEffect has a missing dependency: 'serverId'. Either include it or remove the dependency array.",["131"],"Expected '!==' and instead saw '!='.","'useSelector' is defined but never used.","'selectMembersList' is defined but never used.","'setMembersList' is defined but never used.","'selectUser' is defined but never used.","React Hook useEffect has a missing dependency: 'userCollection'. Either include it or remove the dependency array.",["132"],"'user' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [dispatch, user]",{"range":"139","text":"140"},"Update the dependencies array to be: [channelId, serverId]",{"range":"141","text":"142"},"Update the dependencies array to be: [userCollection]",{"range":"143","text":"144"},[1788,1798],"[dispatch, user]",[1954,1965],"[channelId, serverId]",[757,759],"[userCollection]"]